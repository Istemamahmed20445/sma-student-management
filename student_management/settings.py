"""
Django settings for student_management project.

Generated by 'django-admin startproject' using Django 5.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-%7)!f&f&(q%-22a0x+_clq7n1j0$*d75=nev53$xkyghx(12vh')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Production settings
if not DEBUG:
    ALLOWED_HOSTS = [
        'localhost',
        '127.0.0.1',
        '.onrender.com',  # Render deployment
        '.railway.app',    # Railway deployment
        '.vercel.app',     # Vercel deployment
        '.herokuapp.com',  # Heroku deployment
    ]
else:
    # Development settings
    ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'django_extensions',
    
    # Custom apps
    'core',
    'accounts',
    'students',
    'batches',
    'fees',
    'contacts',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'student_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'student_management.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# PostgreSQL Database Configuration for Render
import dj_database_url

# Try to use DATABASE_URL first (standard Render approach)
DATABASE_URL = os.getenv('DATABASE_URL')
if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL.strip())
    }
else:
    # Fallback to individual environment variables (strip whitespace)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'student_management_db_wkuv').strip(),
            'USER': os.getenv('DB_USER', 'student_management_db_wkuv_user').strip(),
            'PASSWORD': os.getenv('DB_PASSWORD', 'xiNTvRXZi4wRRLVPUguDzBQG6Q06sN4k').strip(),
            'HOST': os.getenv('DB_HOST', 'dpg-d3r5fh8dl3ps73ce5lj0-a.oregon-postgres.render.com').strip(),
            'PORT': os.getenv('DB_PORT', '5432').strip(),
            'OPTIONS': {
                'connect_timeout': 10,
            }
        }
    }

# Fallback to SQLite for local development if PostgreSQL is not available
if os.getenv('USE_SQLITE', 'False').lower() == 'true':
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Firebase Database Configuration
FIREBASE_DATABASE_URL = 'https://sma-student-default-rtdb.firebaseio.com/'

# Firebase Realtime Database Configuration
FIREBASE_RTDB_URL = 'https://sma-student-default-rtdb.firebaseio.com/'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Firebase Configuration
FIREBASE_CONFIG = {
    'project_id': 'sma-student',
    'private_key_id': '37a28d0f422a8535d2ecc5dc11ee93e70707e742',
    'private_key': '-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCfGU4D4H6FxZRm\nNKorVwNgyurDcSz85vvWhSQfy5fdzKn6YUUczyLqZy4O4DJhnMsVgCt5XreFmjpl\nLqu/Kr4cMMd91BoG1XQnRLqrhxDOCfLV+lYBEyp23lzeR+hjJzpga4k9Mqvxo15l\n/XmOsXySrIOawbQp4fQNSArRTMhwKmuPoOWAYRFASmqz9wcDXdNbbMYSfdgm+sow\nBuftTYxPKIUpLi8PdWWClyBQwd+nE/wK4wgkt5TUo2j8RHTohs/HV+e9YxAXE+dy\nix54kQoBj57x9wlGGI7SXW+A73w3h5EWnnx7VU/HbZ/tGrns4BShwabMBBqjTuYi\nes6bDpfPAgMBAAECggEAANSDLS0os19WYJAQtJw5jHRC57wY0lath8XE1bqdrj+x\n56CHiUSLI6xgFwnq4dmF2d0I+eXl8XTCx2q1TlRKJXkE0jxIev3iEcSycDchRESd\nluD+1HP1c6Kj6g4iQA0YZYSwtfgpWjK4At+dJUuQbc3h3bY7XEsiD946RhqwmvdU\nNzH6l8ZaJb3pHPZjKZhNJDI1WCA/sRhGOMkPJCnonW+7OZawkPCROQSFgFKlczW+\nES0LTHT0zWRUzQNqX0uIP6fwdLWaj/ljdoSa86mne6+zw+3/UUT8l94huozehx21\nwc4JNGUyPM1upuxy7gaZsqjeVydv2DRCJY9i0/kOTQKBgQDTUrwNXbdnXFUIjgw9\no06saoz3+ZeZF3yNl3WzfZCWTAbMnuCkMXrajX74LcgVJ4fMlXCxo7TMAlpHz9kh\nEOEErbgefDhCjUX6MhFgpsx06p/Xy/xGQdSvdLw0JUbo9eceLO4O1rcql5c/StKh\nU/Xj4rx5x2J2J+3GO+7CMI1DqwKBgQDAvBOlfh6P2FVGR2/fCHzIqjXauIEJaEFH\nVU8fP7TrwduUZSPY7iS6HB64DUHgAiFTTPsFeS3wPw4KXFqkXL4+6T9J4YI/576n\n7ORMnCrvUWXQVZQoviYw4uG4Jm5sYcAmAQ86QhdIR1vU9T82+RuaNLacsFVTZdz5\nwLdIOPJYbQKBgGWWY0KFp9IvZ81aA/ZpmDt4aVYYDVGSIdUrV3C2zxgBak9ZnSIx\nix6fYMdLsuDAhR7LREaRLSvZga798yJbK+EE5fr5uk37/gTdps7wwF8AH2Es9ZSM\ntwK1unfS57i75aPy82n8vEbkYtgRTxow84bei757JBEq9roSO5/smSxLAoGAdEdE\nBx0u7RPUZsEkokepmRrvwNR9rSJD9/hk8vJpga8EfeQDG5aZe9sJQXtmGfLPDkWs\nUGIKsB4qp1+OpAj8ElKAh19RSKLVKNTH69xwHtBZ/7YR2/7UZbwL+CDfj+3tkkAj\nYr+K8mVy5ulLSSxDVealoaTU5arYBaoaKa2JsIUCgYA+aZFBJ82a/zLx1MbYz/AW\nKJ1XHTmvW8Q7d6guzcPURFH6aPilVlv/ftyzsgqmCKlwhh5+mREJIZeDf8Yd+nu6\n0wx1FyoCfwJ67g8dr6sx1CsfIH8ZTgHGCcwHupl8kndeO1ZmVOulrkVJ0av+RXsd\nFVZUtOIi6XhMK3/+ej7oPQ==\n-----END PRIVATE KEY-----\n',
    'client_email': 'firebase-adminsdk-fbsvc@sma-student.iam.gserviceaccount.com',
    'client_id': '116218628638223423506',
    'auth_uri': 'https://accounts.google.com/o/oauth2/auth',
    'token_uri': 'https://oauth2.googleapis.com/token',
    'auth_provider_x509_cert_url': 'https://www.googleapis.com/oauth2/v1/certs',
    'client_x509_cert_url': 'https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-fbsvc%40sma-student.iam.gserviceaccount.com',
}

# Firebase Web Config
FIREBASE_WEB_CONFIG = {
    'apiKey': 'AIzaSyAC6jhWOKd06VhjV7RTyntVZwkDPGDcf-4',
    'authDomain': 'sma-student.firebaseapp.com',
    'projectId': 'sma-student',
    'storageBucket': 'sma-student.firebasestorage.app',
    'messagingSenderId': '621019846757',
    'appId': '1:621019846757:web:02faa1536bbb73969e0e8c'
}

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20
}

# CORS Configuration
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000",
    "http://192.168.68.103:8000",
    "http://192.168.68.103:3000",
    "http://192.168.68.53:8000",
    "http://192.168.68.53:3000",
    "http://192.168.10.153:8000",
    "http://192.168.10.153:3000",
]

# Allow all local network access for testing
CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_CREDENTIALS = True

# Currency API Configuration
CURRENCY_API_KEY = os.getenv('CURRENCY_API_KEY')

# Login URLs
LOGIN_URL = '/accounts/login/'
LOGIN_REDIRECT_URL = '/dashboard/'
LOGOUT_REDIRECT_URL = '/'

# Production Settings
if not DEBUG:
    # Security settings for production
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    
    # HTTPS settings (uncomment when you have SSL)
    # SECURE_SSL_REDIRECT = True
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True
    
    # Static files configuration for production
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    # Logging configuration
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
            },
        },
        'root': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'INFO',
                'propagate': False,
            },
        },
    }
